from vae_tools.evaluation import corr_pc, corr_sc, corr_tc, corr_cca
import numpy as np

def correlation(u, v):
    print("PC: ", corr_pc(u, v))
    print("SC: ", corr_sc(u, v))
    # print("TC: ", corr_tc(u, v))
    print("CCA: ", corr_cca(u, v))

#%% random data
print("Random data")
num = 100
u = np.random.rand(num,2)
v = np.random.rand(num,2)
correlation(u, v)

#%% Prefect correlation
print("Prefect correlation")
u = np.asarray([[0., 0., -1.], [0,0.,0.], [0.,0.,1.], [0.,0.,2.]])
v = np.asarray([[1.,0.], [0., 0.], [-1., 0.], [-2., 0.]])
correlation(u, v)

#%% Handcrafted data
print("Handcrafted data")
u = np.asarray([[0., 0., 1.], [1.,0.,0.], [2.,2.,2.], [3.,5.,4.]])
v = np.asarray([[0.1, -0.2], [0.9, 1.1], [6.2, 5.9], [11.9, 12.3]])
correlation(u, v)

#%% circular data
print("Circular data")
num = 100
tmp = np.concatenate((np.sin(np.linspace(0, 2*np.pi, num, False))[np.newaxis,:],
                      np.cos(np.linspace(0, 2*np.pi, num, False))[np.newaxis,:]), axis=0).T
u = 2 * tmp
v = 1 * tmp
correlation(u, v)

#%% wavy data

# This example shows a strange behaviour on CCA. While all other correlation metrics show pretty
# invariant correlation coefficient related to the number of samples, CCA does so heavily.

def get_data(num):
    u = np.concatenate((np.sin(np.linspace(0, 4 * np.pi, num, False))[np.newaxis, :],
                        np.linspace(0, 4 * np.pi, num, False)[np.newaxis, :]), axis=0).T
    v = np.concatenate((np.sin(np.linspace(0, 2 * np.pi, num, False))[np.newaxis, :],
                        np.cos(np.linspace(0, 2 * np.pi, num, False))[np.newaxis, :]), axis=0).T
    return u, v

print("Wavy data: 10")
u, v = get_data(10)
correlation(u, v)

print("Wavy data: 10")
u, v = get_data(100)
correlation(u, v)

#%%

tmp = {
'x':[29.86, 30.16, 30.64, 31.29, 32.11, 33.08, 34.18, 35.4, 36.73, 38.14, 39.62, 41.17, 42.78, 44.42, 46.1, 47.81, 49.54, 51.28, 53.03, 54.77, 56.51, 57.54, 58.62, 59.72, 60.85, 62.0, 63.17, 64.33, 65.49, 66.64, 67.77, 68.89, 69.98, 71.05, 72.1, 73.11, 74.1, 75.06, 75.98, 76.88, 77.74, 78.88, 80.03, 81.2, 82.38, 83.58, 84.79, 86.01, 87.24, 88.48, 89.72, 90.96, 92.21, 93.45, 94.69, 95.93, 97.15, 98.36, 99.55, 100.73, 101.88, 102.95, 104.0, 105.02, 106.01, 106.96, 107.86, 108.71, 109.52, 110.28, 111.0, 111.69, 112.35, 112.99, 113.62, 114.23, 114.85, 115.47, 116.1, 116.75, 117.42, 118.02, 118.71, 119.47, 120.31, 121.2, 122.15, 123.13, 124.13, 125.15, 126.18, 127.2, 128.23, 129.25, 130.25, 131.25, 132.22, 133.18, 134.11, 135.02, 135.9, 137.68, 139.39, 141.01, 142.55, 143.99, 145.34, 146.59, 147.74, 148.78, 149.72, 150.55, 151.27, 151.87, 152.35, 152.71, 152.94, 153.05, 153.02, 152.85, 152.54, 152.01, 151.33, 150.52, 149.59, 148.58, 147.5, 146.39, 145.24, 144.09, 142.95, 141.81, 140.71, 139.66, 138.66, 137.75, 136.95, 136.28, 135.78, 135.44, 135.27, 135.26, 135.37, 135.61, 135.98, 136.46, 137.05, 137.73, 138.47, 139.27, 140.12, 141.0, 141.92, 142.85, 143.8, 144.77, 145.75, 146.73, 147.72, 148.72, 149.71, 150.89, 152.1, 153.33, 154.59, 155.85, 157.12, 158.38, 159.63, 160.87, 162.08, 163.26, 164.4, 165.5, 166.55, 167.54, 168.45, 169.29, 170.04, 170.69, 171.25, 171.55, 171.9, 172.3, 172.74, 173.23, 173.77, 174.34, 174.95, 175.6, 176.27, 176.97, 177.7, 178.44, 179.21, 179.98, 180.77, 181.57, 182.38, 183.18, 183.99, 184.72, 185.44, 186.16, 186.89, 187.61, 188.32, 189.04, 189.75, 190.45, 191.14, 191.82, 192.48, 193.12, 193.74, 194.32, 194.87, 195.37, 195.81, 196.21, 196.55],
'y':[140.52, 138.8, 137.12, 135.5, 133.95, 132.49, 131.14, 129.89, 128.75, 127.72, 126.8, 125.99, 125.29, 124.7, 124.22, 123.85, 123.59, 123.45, 123.42, 123.52, 123.75, 124.28, 124.73, 125.09, 125.36, 125.54, 125.62, 125.61, 125.51, 125.32, 125.06, 124.73, 124.33, 123.87, 123.36, 122.79, 122.17, 121.51, 120.8, 120.06, 119.28, 118.76, 118.29, 117.86, 117.48, 117.14, 116.84, 116.6, 116.4, 116.25, 116.15, 116.11, 116.11, 116.18, 116.29, 116.47, 116.7, 116.99, 117.34, 117.75, 118.22, 118.3, 118.48, 118.76, 119.15, 119.64, 120.21, 120.85, 121.55, 122.3, 123.09, 123.9, 124.74, 125.59, 126.45, 127.32, 128.19, 129.05, 129.92, 130.76, 131.59, 132.42, 133.19, 133.88, 134.48, 134.99, 135.4, 135.72, 135.94, 136.08, 136.14, 136.12, 136.03, 135.87, 135.66, 135.39, 135.06, 134.68, 134.25, 133.76, 133.22, 132.13, 130.91, 129.59, 128.17, 126.65, 125.04, 123.36, 121.61, 119.8, 117.92, 116.0, 114.03, 112.02, 109.98, 107.92, 105.84, 103.75, 101.65, 99.56, 97.49, 96.47, 95.54, 94.72, 94.04, 93.49, 93.08, 92.8, 92.65, 92.62, 92.72, 92.93, 93.26, 93.72, 94.3, 95.0, 95.83, 96.77, 97.8, 98.9, 100.04, 101.15, 102.26, 103.34, 104.39, 105.39, 106.33, 107.21, 108.04, 108.81, 109.53, 110.2, 110.83, 111.43, 112.01, 112.55, 113.08, 113.6, 114.1, 114.6, 115.1, 115.57, 115.94, 116.22, 116.4, 116.48, 116.47, 116.37, 116.18, 115.9, 115.53, 115.07, 114.53, 113.9, 113.18, 112.39, 111.51, 110.56, 109.54, 108.45, 107.32, 106.56, 105.83, 105.13, 104.45, 103.81, 103.2, 102.63, 102.1, 101.61, 101.16, 100.76, 100.4, 100.08, 99.81, 99.58, 99.4, 99.26, 99.16, 99.11, 99.09, 99.03, 98.96, 98.88, 98.79, 98.69, 98.56, 98.42, 98.26, 98.06, 97.84, 97.57, 97.28, 96.93, 96.55, 96.11, 95.63, 95.1, 94.53, 93.92, 93.27]
}

u = np.asarray([tmp['x'], tmp['y']]).T
num = 221
v = np.concatenate((np.sin(np.linspace(0, 8*np.pi, num, False))[np.newaxis,:],
                      np.cos(np.linspace(0, 8*np.pi, num, False))[np.newaxis,:]), axis=0).T

correlation(u, v)

#from scipy.spatial.distance import directed_hausdorff
#print(max(directed_hausdorff(u, v)[0], directed_hausdorff(v, u)[0]))
#print(directed_hausdorff(u, v))


